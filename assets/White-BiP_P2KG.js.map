{"version":3,"file":"White-BiP_P2KG.js","sources":["../../src/pages/contents/White/GistDetails.tsx","../../src/pages/contents/White/utils.ts","../../src/pages/contents/White/HSVControls.tsx","../../src/pages/contents/White/RGBControls.tsx","../../src/pages/contents/White/WhiteCanvas.tsx","../../src/pages/contents/White/WhiteGenerator.tsx","../../src/pages/contents/White/svg/HSVCrossSectionSVG.tsx","../../src/pages/contents/White/svg/HSVLateralSVG.tsx","../../src/pages/contents/White/svg/HSVTopViewSVG.tsx","../../src/pages/contents/White/svg/HSVWhiteAreaSVG.tsx","../../src/pages/contents/White/useColorControls.ts","../../src/pages/contents/White/constants.ts","../../src/pages/contents/White/useWhiteGenerator.ts","../../src/pages/contents/White.tsx"],"sourcesContent":["import React from \"react\";\n\ninterface GistDetailsProps {\n  showGistDetails: boolean;\n  setShowGistDetails: (show: boolean) => void;\n}\n\nconst GistDetails: React.FC<GistDetailsProps> = ({\n  showGistDetails,\n  setShowGistDetails,\n}) => (\n  <div className=\"my-6\">\n    <div className=\"rounded-lg border border-gray-300 bg-gray-50 dark:border-gray-700 dark:bg-gray-800\">\n      <button\n        onClick={() => setShowGistDetails(!showGistDetails)}\n        className=\"flex w-full items-center justify-between p-4 text-left font-medium focus:outline-none\"\n      >\n        <span>詳細を{showGistDetails ? \"隠す\" : \"表示\"}</span>\n        <svg\n          className={`h-5 w-5 transform transition-transform ${showGistDetails ? \"rotate-180\" : \"\"}`}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M19 9l-7 7-7-7\"\n          />\n        </svg>\n      </button>\n\n      {showGistDetails && (\n        <div className=\"border-t border-gray-300 p-4 dark:border-gray-700\">\n          <p className=\"mb-4\">\n            <strong>HSVをRGBに変換した理由</strong>\n            <br />\n            RGBは色の重複が無いが、HSVは重複がある。例えば、S:0%,\n            V:100%のとき、色はHの値に関わらず#fff(真っ白)となるから。\n          </p>\n\n          <p>\n            <strong>9825個の算出方法</strong>\n            <br />\n            HSVをRGBに変換し、Rが255の時のG,\n            Bの範囲、Rが254の...と繰り返していき、G,Bについても同様に求める。その後重複を除き数えた。\n            <br />\n            かなり無理やりですが、ソースは\n            <a\n              className=\"ml-1 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300\"\n              href=\"https://gist.github.com/konattsu/00c6195f3ee3a2df83e03311e6b64dbb\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              ここ. (gistで開きます)\n            </a>\n            。\n          </p>\n        </div>\n      )}\n    </div>\n  </div>\n);\n\nexport default GistDetails;\n","import type { RGBColor } from \"./WhiteTypes\";\n\n// Convert HSV to RGB\nexport const HSVtoRGB = (h: number, s: number, v: number): RGBColor => {\n  let r = 0,\n    g = 0,\n    b = 0;\n  const i = Math.floor(h * 6);\n  const f = h * 6 - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      ((r = v), (g = t), (b = p));\n      break;\n    case 1:\n      ((r = q), (g = v), (b = p));\n      break;\n    case 2:\n      ((r = p), (g = v), (b = t));\n      break;\n    case 3:\n      ((r = p), (g = q), (b = v));\n      break;\n    case 4:\n      ((r = t), (g = p), (b = v));\n      break;\n    case 5:\n      ((r = v), (g = p), (b = q));\n      break;\n  }\n\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255),\n  };\n};\n\n// Convert RGB to hex string\nexport const rgbToHex = (r: number, g: number, b: number): string => {\n  return `#${r.toString(16).padStart(2, \"0\")}${g.toString(16).padStart(2, \"0\")}${b.toString(16).padStart(2, \"0\")}`;\n};\n\n// Generate random int between min and max\nexport const generateRandom = (min: number, max: number): number => {\n  return (Math.round(Math.random() * 10000000) % (max - min)) + min;\n};\n","import React from \"react\";\n\nimport { HSVtoRGB, rgbToHex } from \"./utils\";\n\nimport type { HSVColor } from \"./WhiteTypes\";\n\ninterface HSVControlsProps {\n  hsv: HSVColor;\n  onHsvChange: (channel: \"h\" | \"s\" | \"v\", value: number) => void;\n}\n\nconst HSVControls: React.FC<HSVControlsProps> = ({ hsv, onHsvChange }) => {\n  // Generate dynamic gradient colors for sliders\n  const getHueGradient = (): string => {\n    // Create a hue gradient with the current saturation and value\n    const colors: string[] = [];\n    const steps = 12; // More steps for smoother gradient\n\n    for (let i = 0; i < steps; i++) {\n      const hue = (i / (steps - 1)) * 360; // 0 to 360 degrees\n      const { r, g, b } = HSVtoRGB(hue / 360, hsv.s, hsv.v);\n      colors.push(rgbToHex(r, g, b));\n    }\n\n    return `linear-gradient(to right, ${colors.join(\", \")})`;\n  };\n\n  const getSaturationGradient = (): string => {\n    const minColor = rgbToHex(\n      HSVtoRGB(hsv.h / 360, 0, hsv.v).r,\n      HSVtoRGB(hsv.h / 360, 0, hsv.v).g,\n      HSVtoRGB(hsv.h / 360, 0, hsv.v).b,\n    );\n    const maxColor = rgbToHex(\n      HSVtoRGB(hsv.h / 360, 1, hsv.v).r,\n      HSVtoRGB(hsv.h / 360, 1, hsv.v).g,\n      HSVtoRGB(hsv.h / 360, 1, hsv.v).b,\n    );\n    return `linear-gradient(to right, ${minColor}, ${maxColor})`;\n  };\n\n  const getValueGradient = (): string => {\n    const minColor = rgbToHex(\n      HSVtoRGB(hsv.h / 360, hsv.s, 0).r,\n      HSVtoRGB(hsv.h / 360, hsv.s, 0).g,\n      HSVtoRGB(hsv.h / 360, hsv.s, 0).b,\n    );\n    const maxColor = rgbToHex(\n      HSVtoRGB(hsv.h / 360, hsv.s, 1).r,\n      HSVtoRGB(hsv.h / 360, hsv.s, 1).g,\n      HSVtoRGB(hsv.h / 360, hsv.s, 1).b,\n    );\n    return `linear-gradient(to right, ${minColor}, ${maxColor})`;\n  };\n\n  return (\n    <div className=\"my-6 rounded-lg bg-gray-100 p-6 dark:bg-gray-800\">\n      <div className=\"mb-4\">\n        <label\n          htmlFor=\"h-hsv\"\n          className=\"flex items-center justify-between text-gray-700 dark:text-gray-300\"\n        >\n          <span>H</span>\n          <span className=\"font-mono\">{Math.round(hsv.h)}°</span>\n        </label>\n        <input\n          type=\"range\"\n          id=\"h-hsv\"\n          className=\"h-2 w-full cursor-pointer appearance-none rounded-lg\"\n          style={{\n            background: getHueGradient(),\n          }}\n          min=\"0\"\n          max=\"360\"\n          value={hsv.h}\n          step=\"1\"\n          onChange={(e) => onHsvChange(\"h\", parseInt(e.target.value))}\n        />\n      </div>\n\n      <div className=\"mb-4\">\n        <label\n          htmlFor=\"s-hsv\"\n          className=\"flex items-center justify-between text-gray-700 dark:text-gray-300\"\n        >\n          <span>S</span>\n          <span className=\"font-mono\">{Math.round(hsv.s * 100)}%</span>\n        </label>\n        <input\n          type=\"range\"\n          id=\"s-hsv\"\n          className=\"h-2 w-full cursor-pointer appearance-none rounded-lg\"\n          style={{\n            background: getSaturationGradient(),\n          }}\n          min=\"0\"\n          max=\"1\"\n          value={hsv.s}\n          step=\"0.01\"\n          onChange={(e) => onHsvChange(\"s\", parseFloat(e.target.value))}\n        />\n      </div>\n\n      <div className=\"mb-4\">\n        <label\n          htmlFor=\"v-hsv\"\n          className=\"flex items-center justify-between text-gray-700 dark:text-gray-300\"\n        >\n          <span>V</span>\n          <span className=\"font-mono\">{Math.round(hsv.v * 100)}%</span>\n        </label>\n        <input\n          type=\"range\"\n          id=\"v-hsv\"\n          className=\"h-2 w-full cursor-pointer appearance-none rounded-lg\"\n          style={{\n            background: getValueGradient(),\n          }}\n          min=\"0\"\n          max=\"1\"\n          value={hsv.v}\n          step=\"0.01\"\n          onChange={(e) => onHsvChange(\"v\", parseFloat(e.target.value))}\n        />\n      </div>\n\n      <div\n        className=\"mt-4 h-20 w-full rounded border border-gray-300 dark:border-gray-600\"\n        style={{\n          backgroundColor: rgbToHex(\n            HSVtoRGB(hsv.h / 360, hsv.s, hsv.v).r,\n            HSVtoRGB(hsv.h / 360, hsv.s, hsv.v).g,\n            HSVtoRGB(hsv.h / 360, hsv.s, hsv.v).b,\n          ),\n        }}\n      ></div>\n    </div>\n  );\n};\n\nexport default HSVControls;\n","import React from \"react\";\n\nimport type { RGBColor } from \"./WhiteTypes\";\n\ninterface RGBControlsProps {\n  rgb: RGBColor;\n  onRgbChange: (channel: \"r\" | \"g\" | \"b\", value: number) => void;\n  rgbToHex: (r: number, g: number, b: number) => string;\n}\n\nconst RGBControls: React.FC<RGBControlsProps> = ({\n  rgb,\n  onRgbChange,\n  rgbToHex,\n}) => {\n  // Generate dynamic gradient colors for sliders\n  const getRedGradient = (): string => {\n    const minColor = rgbToHex(0, rgb.g, rgb.b);\n    const maxColor = rgbToHex(255, rgb.g, rgb.b);\n    return `linear-gradient(to right, ${minColor}, ${maxColor})`;\n  };\n\n  const getGreenGradient = (): string => {\n    const minColor = rgbToHex(rgb.r, 0, rgb.b);\n    const maxColor = rgbToHex(rgb.r, 255, rgb.b);\n    return `linear-gradient(to right, ${minColor}, ${maxColor})`;\n  };\n\n  const getBlueGradient = (): string => {\n    const minColor = rgbToHex(rgb.r, rgb.g, 0);\n    const maxColor = rgbToHex(rgb.r, rgb.g, 255);\n    return `linear-gradient(to right, ${minColor}, ${maxColor})`;\n  };\n\n  return (\n    <div className=\"my-6 rounded-lg bg-gray-100 p-6 dark:bg-gray-800\">\n      <div className=\"mb-4\">\n        <label\n          htmlFor=\"red\"\n          className=\"flex items-center justify-between text-gray-700 dark:text-gray-300\"\n        >\n          <span>赤</span>\n          <span className=\"font-mono\">\n            0x{rgb.r.toString(16).padStart(2, \"0\")} , {rgb.r}\n          </span>\n        </label>\n        <input\n          type=\"range\"\n          id=\"red\"\n          className=\"h-2 w-full cursor-pointer appearance-none rounded-lg\"\n          style={{\n            background: getRedGradient(),\n          }}\n          min=\"0\"\n          max=\"255\"\n          value={rgb.r}\n          step=\"1\"\n          onChange={(e) => onRgbChange(\"r\", parseInt(e.target.value))}\n        />\n      </div>\n\n      <div className=\"mb-4\">\n        <label\n          htmlFor=\"green\"\n          className=\"flex items-center justify-between text-gray-700 dark:text-gray-300\"\n        >\n          <span>緑</span>\n          <span className=\"font-mono\">\n            0x{rgb.g.toString(16).padStart(2, \"0\")} , {rgb.g}\n          </span>\n        </label>\n        <input\n          type=\"range\"\n          id=\"green\"\n          className=\"h-2 w-full cursor-pointer appearance-none rounded-lg\"\n          style={{\n            background: getGreenGradient(),\n          }}\n          min=\"0\"\n          max=\"255\"\n          value={rgb.g}\n          step=\"1\"\n          onChange={(e) => onRgbChange(\"g\", parseInt(e.target.value))}\n        />\n      </div>\n\n      <div className=\"mb-4\">\n        <label\n          htmlFor=\"blue\"\n          className=\"flex items-center justify-between text-gray-700 dark:text-gray-300\"\n        >\n          <span>青</span>\n          <span className=\"font-mono\">\n            0x{rgb.b.toString(16).padStart(2, \"0\")} , {rgb.b}\n          </span>\n        </label>\n        <input\n          type=\"range\"\n          id=\"blue\"\n          className=\"h-2 w-full cursor-pointer appearance-none rounded-lg\"\n          style={{\n            background: getBlueGradient(),\n          }}\n          min=\"0\"\n          max=\"255\"\n          value={rgb.b}\n          step=\"1\"\n          onChange={(e) => onRgbChange(\"b\", parseInt(e.target.value))}\n        />\n      </div>\n\n      <div\n        className=\"mt-4 h-20 w-full rounded border border-gray-300 dark:border-gray-600\"\n        style={{ backgroundColor: rgbToHex(rgb.r, rgb.g, rgb.b) }}\n      ></div>\n    </div>\n  );\n};\n\nexport default RGBControls;\n","import React, { useRef, useEffect } from \"react\";\n\ninterface WhiteCanvasProps {\n  color: string;\n  name?: string;\n}\n\nconst WhiteCanvas: React.FC<WhiteCanvasProps> = ({ color, name }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  // 3:1 aspect ratio constants\n  const CANVAS_WIDTH = 1500;\n  const CANVAS_HEIGHT = 500;\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas === null) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (ctx === null) return;\n    ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    ctx.fillStyle = color;\n    ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    ctx.fillStyle = \"#000\";\n    ctx.font = \"90px monospace\";\n    ctx.textBaseline = \"top\";\n    ctx.fillText(color, CANVAS_WIDTH - 400, CANVAS_HEIGHT - 100);\n    if (name !== null && name !== undefined && name.trim() !== \"\") {\n      ctx.font = \"120px monospace\";\n      ctx.fillText(name, 100, 100);\n    }\n  }, [color, name]);\n\n  return (\n    <canvas\n      id=\"white-canvas\"\n      ref={canvasRef}\n      width={CANVAS_WIDTH}\n      height={CANVAS_HEIGHT}\n      className=\"h-full w-full object-contain\"\n    />\n  );\n};\n\nexport default WhiteCanvas;\n","import React from \"react\";\n\nimport WhiteCanvas from \"./WhiteCanvas\";\n\ninterface WhiteGeneratorProps {\n  whiteName: string;\n  whiteColor: string;\n  onWhiteNameChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onGenerateWhite: () => void;\n}\n\nconst WhiteGenerator: React.FC<WhiteGeneratorProps> = ({\n  whiteName,\n  whiteColor,\n  onWhiteNameChange,\n  onGenerateWhite,\n}) => {\n  const handleSaveImage = (e: React.MouseEvent<HTMLAnchorElement>): void => {\n    e.preventDefault();\n    const canvas = document.querySelector(\"#white-canvas\") as HTMLCanvasElement;\n    if (canvas != null) {\n      const url = canvas.toDataURL(\"image/png\");\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"white.png\";\n      a.click();\n    }\n  };\n\n  return (\n    <div className=\"my-6 space-y-4 rounded-lg border border-gray-300 bg-gray-50 p-6 dark:border-gray-700 dark:bg-gray-800\">\n      <div className=\"flex flex-col gap-4 lg:flex-row lg:items-center\">\n        <div className=\"flex flex-col gap-2 lg:flex-grow lg:flex-row lg:items-center\">\n          <label\n            htmlFor=\"input-white-name\"\n            className=\"font-medium whitespace-nowrap\"\n          >\n            色の名前(1-10字):\n          </label>\n          <input\n            type=\"text\"\n            id=\"input-white-name\"\n            className=\"w-full rounded border border-gray-300 p-2 focus:border-blue-500 focus:outline-none lg:min-w-0 lg:flex-grow dark:border-gray-600 dark:bg-gray-700\"\n            value={whiteName}\n            onChange={onWhiteNameChange}\n            maxLength={10}\n            placeholder=\"ここに入力\"\n          />\n        </div>\n\n        <div className=\"flex flex-col gap-2 sm:flex-row lg:flex-shrink-0\">\n          <button\n            onClick={onGenerateWhite}\n            className=\"rounded bg-blue-600 px-4 py-2 font-medium text-white hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-600\"\n          >\n            別の白色を生成\n          </button>\n\n          <a\n            href=\"#\"\n            download=\"white.png\"\n            className=\"rounded bg-green-600 px-4 py-2 text-center font-medium text-white hover:bg-green-700 dark:bg-green-700 dark:hover:bg-green-600\"\n            onClick={handleSaveImage}\n          >\n            画像を保存\n          </a>\n        </div>\n      </div>\n\n      <div className=\"relative aspect-video w-full overflow-hidden rounded border border-gray-300 bg-white dark:border-gray-600\">\n        <WhiteCanvas color={whiteColor} name={whiteName} />\n      </div>\n    </div>\n  );\n};\n\nexport default WhiteGenerator;\n","import React from \"react\";\n\nconst HSVCrossSectionSVG: React.FC = () => (\n  <svg\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"h-full w-full\"\n  >\n    <defs>\n      <linearGradient id=\"cs-white-lg-black\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"0.9\">\n        <stop offset=\"0%\" stopColor=\"#fff\" stopOpacity=\"0\" />\n        <stop offset=\"100%\" stopColor=\"#000\" />\n      </linearGradient>\n      <linearGradient\n        id=\"cs-white-lg-red\"\n        x1=\"0.8\"\n        x2=\"-0.5\"\n        y1=\"0.3\"\n        y2=\"-0.3\"\n      >\n        <stop offset=\"0%\" stopColor=\"#f00\" />\n        <stop offset=\"100%\" stopColor=\"#fff\" stopOpacity=\"0.3\" />\n      </linearGradient>\n      <linearGradient id=\"cs-white-lg-black-2\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"0.9\">\n        <stop offset=\"0%\" stopColor=\"#000\" stopOpacity=\"0\" />\n        <stop offset=\"100%\" stopColor=\"#000\" />\n      </linearGradient>\n      <linearGradient id=\"cs-white-lg-red-2\" x1=\"0.8\" x2=\"0\" y1=\"0.3\" y2=\"-0.5\">\n        <stop offset=\"0%\" stopColor=\"#f00\" />\n        <stop offset=\"100%\" stopColor=\"#faa\" stopOpacity=\"0\" />\n      </linearGradient>\n      <linearGradient id=\"cs-white-lg-white\" x1=\"0\" x2=\"0.5\" y1=\"0\" y2=\"0.5\">\n        <stop offset=\"0%\" stopColor=\"#fff\" stopOpacity=\"1\" />\n        <stop offset=\"100%\" stopColor=\"#000\" stopOpacity=\"0\" />\n      </linearGradient>\n    </defs>\n\n    <style>{`\n      .hsv-cs-background { fill: transparent; }\n      .hsv-cs-line { stroke: #333; }\n      .hsv-cs-arrow {\n        fill: #333;\n        stroke: #333;\n      }\n      .hsv-cs-text {\n        fill: #333;\n        font-family: sans-serif;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        .hsv-cs-line { stroke: #e5e5e5; }\n        .hsv-cs-arrow {\n          fill: #e5e5e5;\n          stroke: #e5e5e5;\n        }\n        .hsv-cs-text { fill: #e5e5e5; }\n      }\n    `}</style>\n\n    <rect className=\"hsv-cs-background\" x=\"0\" y=\"0\" width=\"100\" height=\"100\" />\n    <polygon points=\"30,90 30,15 75,15\" fill=\"#000\" opacity=\"1\" />\n    <polygon points=\"30,90 30,15 75,15\" fill=\"url(#cs-white-lg-red)\" />\n    <polygon points=\"30,90 30,15 75,15\" fill=\"url(#cs-white-lg-red-2)\" />\n    <polygon points=\"30,90 30,15 75,15\" fill=\"url(#cs-white-lg-black)\" />\n    <polygon points=\"30,90 30,15 75,15\" fill=\"url(#cs-white-lg-black-2)\" />\n    <polygon points=\"30,90 30,15 75,15\" fill=\"url(#cs-white-lg-white)\" />\n    <polygon\n      points=\"30,90 30,15 75,15\"\n      fill=\"none\"\n      className=\"hsv-cs-line\"\n      strokeWidth=\"0.3\"\n    />\n    <text className=\"hsv-cs-text\" x=\"30\" y=\"13\" fontSize=\"10\">\n      S\n    </text>\n    <line\n      className=\"hsv-cs-line\"\n      x1=\"40\"\n      y1=\"10\"\n      x2=\"70\"\n      y2=\"10\"\n      strokeWidth=\"1\"\n    />\n    <polygon className=\"hsv-cs-arrow\" points=\"71,10 68,7 68,13\" />\n    <text className=\"hsv-cs-text\" x=\"20\" y=\"85\" fontSize=\"10\">\n      V\n    </text>\n    <line\n      className=\"hsv-cs-line\"\n      x1=\"23\"\n      y1=\"70\"\n      x2=\"23\"\n      y2=\"20\"\n      strokeWidth=\"1\"\n    />\n    <polygon className=\"hsv-cs-arrow\" points=\"23,19 20,22 26,22\" />\n  </svg>\n);\n\nexport default HSVCrossSectionSVG;\n","import React from \"react\";\n\nconst HSVLateralSVG: React.FC = () => (\n  <svg\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"h-full w-full\"\n  >\n    <style>{`\n      .hsv-lateral-background { fill: transparent; }\n      .hsv-lateral-line {\n        stroke: #333;\n        fill: none;\n      }\n      .hsv-lateral-arrow {\n        fill: #333;\n        stroke: #333;\n      }\n      .hsv-lateral-text {\n        fill: #333;\n        font-family: sans-serif;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        .hsv-lateral-line { stroke: #e5e5e5; }\n        .hsv-lateral-arrow {\n          fill: #e5e5e5;\n          stroke: #e5e5e5;\n        }\n        .hsv-lateral-text { fill: #e5e5e5; }\n      }\n    `}</style>\n\n    <rect\n      className=\"hsv-lateral-background\"\n      x=\"0\"\n      y=\"0\"\n      width=\"100\"\n      height=\"100\"\n    />\n    <ellipse\n      className=\"hsv-lateral-line\"\n      cx=\"50\"\n      cy=\"30\"\n      rx=\"40\"\n      ry=\"10\"\n      strokeWidth=\"2\"\n    />\n    <polyline\n      className=\"hsv-lateral-line\"\n      points=\"10,31 50,90 90,31\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n    />\n    <line\n      className=\"hsv-lateral-line\"\n      x1=\"50\"\n      y1=\"91\"\n      x2=\"95\"\n      y2=\"91\"\n      strokeLinecap=\"round\"\n    />\n    <polygon className=\"hsv-lateral-arrow\" points=\"95,91 93,89, 93,93\" />\n    <text className=\"hsv-lateral-text\" x=\"90\" y=\"87\" fontSize=\"10\">\n      S\n    </text>\n    <line\n      className=\"hsv-lateral-line\"\n      x1=\"50\"\n      y1=\"91\"\n      x2=\"85\"\n      y2=\"65\"\n      strokeLinecap=\"round\"\n    />\n    <text className=\"hsv-lateral-text\" x=\"68\" y=\"88\" fontSize=\"10\">\n      H\n    </text>\n    <polygon className=\"hsv-lateral-arrow\" points=\"63,82 61.5,85 65.5,83\" />\n    <rect className=\"hsv-lateral-text\" x=\"63.7\" y=\"88\" width=\"1\" height=\"3\" />\n    <line\n      className=\"hsv-lateral-line\"\n      x1=\"63.5\"\n      y1=\"84\"\n      x2=\"64\"\n      y2=\"86.5\"\n      strokeWidth=\"1\"\n    />\n    <line\n      className=\"hsv-lateral-line\"\n      x1=\"50\"\n      y1=\"91\"\n      x2=\"50\"\n      y2=\"10\"\n      strokeWidth=\"1\"\n      strokeLinecap=\"round\"\n    />\n    <polygon className=\"hsv-lateral-arrow\" points=\"50,10 52,12 48,12\" />\n    <text className=\"hsv-lateral-text\" x=\"38\" y=\"15\" fontSize=\"10\">\n      V\n    </text>\n  </svg>\n);\n\nexport default HSVLateralSVG;\n","import React from \"react\";\n\nconst HSVTopViewSVG: React.FC = () => (\n  <svg\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"h-full w-full\"\n  >\n    <defs>\n      <radialGradient id=\"top-hsv-white\" cx=\"50%\" cy=\"50%\" r=\"30%\">\n        <stop offset=\"0%\" stopColor=\"#fff\" stopOpacity=\"1\" />\n        <stop offset=\"100%\" stopColor=\"#fff\" stopOpacity=\"0\" />\n      </radialGradient>\n      <radialGradient id=\"top-hsv-red\" cx=\"100%\" cy=\"50%\" r=\"70%\">\n        <stop offset=\"0%\" stopColor=\"#f00\" stopOpacity=\"1\" />\n        <stop offset=\"100%\" stopColor=\"#f55\" stopOpacity=\"0\" />\n      </radialGradient>\n      <radialGradient id=\"top-hsv-yellow\" cx=\"75%\" cy=\"13%\" r=\"70%\">\n        <stop offset=\"0%\" stopColor=\"#ff0\" stopOpacity=\"1\" />\n        <stop offset=\"100%\" stopColor=\"#ff5\" stopOpacity=\"0\" />\n      </radialGradient>\n      <radialGradient id=\"top-hsv-green\" cx=\"25%\" cy=\"13%\" r=\"70%\">\n        <stop offset=\"0%\" stopColor=\"#0f0\" stopOpacity=\"1\" />\n        <stop offset=\"100%\" stopColor=\"#5f5\" stopOpacity=\"0\" />\n      </radialGradient>\n      <radialGradient id=\"top-hsv-light-blue\" cx=\"0%\" cy=\"50%\" r=\"70%\">\n        <stop offset=\"0%\" stopColor=\"#0ff\" stopOpacity=\"1\" />\n        <stop offset=\"100%\" stopColor=\"#5ff\" stopOpacity=\"0\" />\n      </radialGradient>\n      <radialGradient id=\"top-hsv-blue\" cx=\"25%\" cy=\"87%\" r=\"70%\">\n        <stop offset=\"0%\" stopColor=\"#00f\" stopOpacity=\"1\" />\n        <stop offset=\"100%\" stopColor=\"#55f\" stopOpacity=\"0\" />\n      </radialGradient>\n      <radialGradient id=\"top-hsv-violet\" cx=\"75%\" cy=\"87%\" r=\"70%\">\n        <stop offset=\"0%\" stopColor=\"#f0f\" stopOpacity=\"1\" />\n        <stop offset=\"100%\" stopColor=\"#f5f\" stopOpacity=\"0\" />\n      </radialGradient>\n    </defs>\n\n    <style>{`\n      .hsv-top-text {\n        fill: #000;\n        font-family: sans-serif;\n      }\n      .hsv-top-line {\n        stroke: #000;\n      }\n      .hsv-top-arrow {\n        stroke: #000;\n        fill: #000;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        .hsv-top-text { fill: #fff; }\n        .hsv-top-line { stroke: #fff; }\n        .hsv-top-arrow {\n          stroke: #fff;\n          fill: #fff;\n        }\n      }\n    `}</style>\n\n    <rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"none\" />\n    <circle cx=\"50%\" cy=\"50%\" r=\"50%\" fill=\"url(#top-hsv-red)\" opacity=\"1\" />\n    <circle cx=\"50%\" cy=\"50%\" r=\"50%\" fill=\"url(#top-hsv-yellow)\" opacity=\"1\" />\n    <circle cx=\"50%\" cy=\"50%\" r=\"50%\" fill=\"url(#top-hsv-green)\" opacity=\"1\" />\n    <circle\n      cx=\"50%\"\n      cy=\"50%\"\n      r=\"50%\"\n      fill=\"url(#top-hsv-light-blue)\"\n      opacity=\"1\"\n    />\n    <circle cx=\"50%\" cy=\"50%\" r=\"50%\" fill=\"url(#top-hsv-blue)\" opacity=\"1\" />\n    <circle cx=\"50%\" cy=\"50%\" r=\"50%\" fill=\"url(#top-hsv-violet)\" opacity=\"1\" />\n    <circle\n      cx=\"50%\"\n      cy=\"50%\"\n      r=\"50%\"\n      fill=\"url(#top-hsv-white)\"\n      opacity=\"0.5\"\n    />\n    <circle cx=\"50%\" cy=\"50%\" r=\"3\" className=\"hsv-top-arrow\" />\n    <line\n      x1=\"50\"\n      y1=\"50\"\n      x2=\"100\"\n      y2=\"50\"\n      className=\"hsv-top-line\"\n      strokeWidth=\"1\"\n    />\n    <text x=\"40\" y=\"60\" className=\"hsv-top-text\" fontSize=\"10\">\n      V\n    </text>\n    <line x1=\"50\" y1=\"50\" x2=\"75.5\" y2=\"7\" className=\"hsv-top-line\" />\n    <text x=\"60\" y=\"45\" className=\"hsv-top-text\" fontSize=\"10\">\n      H\n    </text>\n    <line x1=\"60\" y1=\"50\" x2=\"59\" y2=\"47\" className=\"hsv-top-line\" />\n    <line x1=\"58\" y1=\"45\" x2=\"55\" y2=\"42\" className=\"hsv-top-line\" />\n    <text x=\"60\" y=\"15\" className=\"hsv-top-text\" fontSize=\"10\">\n      S\n    </text>\n    <polygon points=\"75.5,7 73.5,7.6 76,9\" className=\"hsv-top-arrow\" />\n  </svg>\n);\n\nexport default HSVTopViewSVG;\n","import React from \"react\";\n\nconst HSVWhiteAreaSVG: React.FC = () => (\n  <svg\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"h-full w-full\"\n  >\n    <style>{`\n      .hsv-white-background { fill: transparent; }\n      .hsv-white-line {\n        stroke: #333;\n        fill: none;\n      }\n      .hsv-white-arrow {\n        fill: #333;\n        stroke: #333;\n      }\n      .hsv-white-text {\n        fill: #333;\n        font-family: sans-serif;\n      }\n      .hsv-white-highlight {\n        fill: #f22;\n        stroke: #333;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        .hsv-white-line { stroke: #e5e5e5; }\n        .hsv-white-arrow {\n          fill: #e5e5e5;\n          stroke: #e5e5e5;\n        }\n        .hsv-white-text { fill: #e5e5e5; }\n        .hsv-white-highlight { stroke: #e5e5e5; }\n      }\n    `}</style>\n\n    <rect\n      className=\"hsv-white-background\"\n      x=\"0\"\n      y=\"0\"\n      width=\"100\"\n      height=\"100\"\n    />\n    <polyline\n      className=\"hsv-white-highlight\"\n      points=\"30,31 50,60 70,31\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n    />\n    <ellipse\n      className=\"hsv-white-highlight\"\n      cx=\"50\"\n      cy=\"30\"\n      rx=\"20\"\n      ry=\"5\"\n      strokeWidth=\"2\"\n    />\n    <ellipse\n      className=\"hsv-white-line\"\n      cx=\"50\"\n      cy=\"30\"\n      rx=\"40\"\n      ry=\"10\"\n      strokeWidth=\"1\"\n    />\n    <polyline\n      className=\"hsv-white-line\"\n      points=\"10,31 50,90 90,31\"\n      strokeWidth=\"1\"\n      strokeLinecap=\"round\"\n    />\n    <line\n      className=\"hsv-white-line\"\n      x1=\"50\"\n      y1=\"91\"\n      x2=\"95\"\n      y2=\"91\"\n      strokeLinecap=\"round\"\n    />\n    <polygon className=\"hsv-white-arrow\" points=\"95,91 93,89, 93,93\" />\n    <text className=\"hsv-white-text\" x=\"90\" y=\"87\" fontSize=\"10\">\n      S\n    </text>\n    <line\n      className=\"hsv-white-line\"\n      x1=\"50\"\n      y1=\"91\"\n      x2=\"85\"\n      y2=\"65\"\n      strokeLinecap=\"round\"\n    />\n    <text className=\"hsv-white-text\" x=\"68\" y=\"88\" fontSize=\"10\">\n      H\n    </text>\n    <polygon className=\"hsv-white-arrow\" points=\"63,82 61.5,85 65.5,83\" />\n    <rect className=\"hsv-white-text\" x=\"63.7\" y=\"88\" width=\"1\" height=\"3\" />\n    <line\n      className=\"hsv-white-line\"\n      x1=\"63.5\"\n      y1=\"84\"\n      x2=\"64\"\n      y2=\"86.5\"\n      strokeWidth=\"1\"\n    />\n    <line\n      className=\"hsv-white-line\"\n      x1=\"50\"\n      y1=\"91\"\n      x2=\"50\"\n      y2=\"10\"\n      strokeWidth=\"1\"\n      strokeLinecap=\"round\"\n    />\n    <polygon className=\"hsv-white-arrow\" points=\"50,10 52,12 48,12\" />\n    <text className=\"hsv-white-text\" x=\"38\" y=\"15\" fontSize=\"10\">\n      V\n    </text>\n  </svg>\n);\n\nexport default HSVWhiteAreaSVG;\n","import { useState } from \"react\";\n\nimport type { RGBColor, HSVColor } from \"./WhiteTypes\";\n\nexport const useColorControls = (): {\n  rgb: RGBColor;\n  hsv: HSVColor;\n  handleRgbChange: (channel: \"r\" | \"g\" | \"b\", value: number) => void;\n  handleHsvChange: (channel: \"h\" | \"s\" | \"v\", value: number) => void;\n} => {\n  // RGB slider state\n  const [rgb, setRgb] = useState<RGBColor>({ r: 0, g: 0, b: 0 });\n\n  // HSV slider state\n  const [hsv, setHsv] = useState<HSVColor>({ h: 0, s: 1, v: 1 });\n\n  // Handle RGB slider changes\n  const handleRgbChange = (channel: \"r\" | \"g\" | \"b\", value: number): void => {\n    const newRgb = { ...rgb, [channel]: value };\n    setRgb(newRgb);\n  };\n\n  // Handle HSV slider changes\n  const handleHsvChange = (channel: \"h\" | \"s\" | \"v\", value: number): void => {\n    let newHsv = { ...hsv, [channel]: value };\n\n    // If v is 0, force s to be 0 as well (following the JS logic)\n    if (channel === \"v\" && value === 0) {\n      newHsv.s = 0;\n    }\n    // If current v is 0, always keep s at 0\n    if (newHsv.v === 0) {\n      newHsv.s = 0;\n    }\n\n    setHsv(newHsv);\n  };\n\n  return {\n    rgb,\n    hsv,\n    handleRgbChange,\n    handleHsvChange,\n  };\n};\n","// White color range definition\nexport const RGB_RANGE = [\n  [223, 223, 230],\n  [224, 223, 231],\n  [225, 223, 232],\n  [226, 223, 233],\n  [227, 223, 234],\n  [228, 223, 235],\n  [229, 223, 236],\n  [230, 223, 237],\n  [231, 224, 238],\n  [232, 225, 239],\n  [233, 226, 241],\n  [234, 227, 242],\n  [235, 228, 243],\n  [236, 229, 244],\n  [237, 230, 245],\n  [238, 231, 246],\n  [239, 232, 247],\n  [240, 233, 248],\n  [241, 233, 249],\n  [242, 234, 250],\n  [243, 235, 251],\n  [244, 236, 252],\n  [245, 237, 253],\n  [246, 238, 254],\n  [247, 239, 255],\n  [248, 240, 255],\n  [249, 241, 255],\n  [250, 242, 255],\n  [251, 243, 255],\n  [252, 244, 255],\n  [253, 245, 255],\n  [254, 246, 255],\n  [255, 247, 255],\n];\n","import type React from \"react\";\nimport { useState, useCallback } from \"react\";\n\nimport { RGB_RANGE } from \"./constants\";\nimport { generateRandom } from \"./utils\";\n\nexport const useWhiteGenerator = (): {\n  whiteName: string;\n  whiteColor: string;\n  handleWhiteNameChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  handleGenerateWhite: () => void;\n} => {\n  // White canvas state\n  const [whiteName, setWhiteName] = useState<string>(\"\");\n  const [whiteColor, setWhiteColor] = useState<string>(\"#ffffff\");\n\n  // Generate a random white color\n  const generateWhiteColor = useCallback((): string => {\n    const [base, min, max] = RGB_RANGE[generateRandom(0, RGB_RANGE.length)];\n    const a = base;\n    const b1 = generateRandom(min, max + 1);\n    const c1 = generateRandom(min, max + 1);\n\n    // Randomly arrange RGB values\n    const arrangeRGB = (): [number, number, number] => {\n      switch (generateRandom(0, 3)) {\n        case 0:\n          return [a, b1, c1];\n        case 1:\n          return [b1, a, c1];\n        case 2:\n          return [b1, c1, a];\n        default:\n          return [a, b1, c1];\n      }\n    };\n\n    const [r, g, b] = arrangeRGB();\n    return `#${r.toString(16)}${g.toString(16)}${b.toString(16)}`;\n  }, []);\n\n  // Generate new white color\n  const handleGenerateWhite = (): void => {\n    const newColor = generateWhiteColor();\n    setWhiteColor(newColor);\n  };\n\n  // Handle white name change\n  const handleWhiteNameChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ): void => {\n    const newName = e.target.value.slice(0, 10);\n    setWhiteName(newName);\n  };\n\n  return {\n    whiteName,\n    whiteColor,\n    handleWhiteNameChange,\n    handleGenerateWhite,\n  };\n};\n","import React, { useState } from \"react\";\n\nimport ContentPageLayout from \"../../components/ContentPageLayout\";\n\nimport GistDetails from \"./White/GistDetails\";\nimport HSVControls from \"./White/HSVControls\";\nimport RGBControls from \"./White/RGBControls\";\nimport WhiteGenerator from \"./White/WhiteGenerator\";\nimport HSVCrossSectionSVG from \"./White/svg/HSVCrossSectionSVG\";\nimport HSVLateralSVG from \"./White/svg/HSVLateralSVG\";\nimport HSVTopViewSVG from \"./White/svg/HSVTopViewSVG\";\nimport HSVWhiteAreaSVG from \"./White/svg/HSVWhiteAreaSVG\";\nimport { useColorControls } from \"./White/useColorControls\";\nimport { useWhiteGenerator } from \"./White/useWhiteGenerator\";\nimport { rgbToHex } from \"./White/utils\";\n\nconst White: React.FC = () => {\n  // Color controls (RGB and HSV sliders)\n  const { rgb, hsv, handleRgbChange, handleHsvChange } = useColorControls();\n\n  // White color generator\n  const { whiteName, whiteColor, handleWhiteNameChange, handleGenerateWhite } =\n    useWhiteGenerator();\n\n  // Gist details state\n  const [showGistDetails, setShowGistDetails] = useState<boolean>(false);\n\n  return (\n    <ContentPageLayout title=\"白色\">\n      <div className=\"prose dark:prose-invert max-w-none\">\n        <h2 className=\"mt-8 text-2xl font-bold\">白色</h2>\n        <p>\n          「白色」と聞いて一般的に思い浮かべるのは何でしょうか？「雲の色」、「消しゴムの色」など人により様々な意見が挙がると思います。\n          <br />\n          しかし、同じ単語の「白色」でも微妙に色合いが異なるはずです。タレントの某ミカさんの発言「白って200色あんねん」にあるように、「白色」の中でも更に色を分割できます。この状況に対し、人類は危機を感じるべきです。\n        </p>\n        <p>\n          皆さんは周りにいる友人や家族に話しかける際「ねぇ、人間」と話しかけますか?\n          もちろん答えはNo。顔が似ていたとて、相手の名前を呼ぶでしょう。こんなこと許されるはずがありません。「多様性」の時代、平等に扱うのが正しい対応ではないでしょうか?\n        </p>\n        <p>\n          そこで「白色」に見える色の範囲を決め、ランダムに選ばれた1色に名前を付けて頂きます。\n        </p>\n\n        <h2 className=\"mt-8 text-2xl font-bold\">RGB</h2>\n        <p>\n          色の表し方にはいくつか種類があります。まずは、「RGB」についてです。\n        </p>\n        <p>\n          RGB(RGBカラーモデル)とは赤-Red、緑-Green、青-Blueの3色をそれぞれ 0\n          から 255 の組み合わせて表現します。例えば[255, 255,\n          0]の組み合わせだと黄色です。16進数を用いて#ffff00と表現したりもします。\n        </p>\n        <p>\n          以下のツールで確認できます。自由に操作してみてください。0xという接頭語は16進数であることを明示しています。\n        </p>\n\n        {/* RGB Controls */}\n        <RGBControls\n          rgb={rgb}\n          onRgbChange={handleRgbChange}\n          rgbToHex={rgbToHex}\n        />\n\n        <p>\n          光の足し算なので、全て 0 → 黒色 , 全て255 → 白色\n          です。(厳密には違うかもしれませんがイメージはこれです。)\n        </p>\n        <p>\n          全ての値を220にすると白色に見えますが、どれか一つの値を255にすると白とは言い難い色になります。これでは定義が難しいのでより直感的に定義できる別の方法を試します。\n        </p>\n\n        <h2 className=\"mt-8 text-2xl font-bold\">HSV</h2>\n        <p>\n          次はHSV(HSB)色空間についてです。3次元を基にして人間が色を知覚する方法に類似するように作成された考え方です。\n        </p>\n        <p>\n          HSV色空間は円錐の形をしています。1枚目が俯瞰図(モノクロ化)、2枚目はy軸の断面図、3枚目は真上から見た図です。\n        </p>\n\n        {/* HSV Visualizations */}\n        <div className=\"my-6 flex flex-wrap justify-center gap-4\">\n          <div className=\"h-32 w-32\">\n            <HSVLateralSVG />\n          </div>\n          <div className=\"h-32 w-32\">\n            <HSVCrossSectionSVG />\n          </div>\n          <div className=\"h-32 w-32\">\n            <HSVTopViewSVG />\n          </div>\n        </div>\n\n        <p>\n          まず H-色相 S-彩度\n          V(B)-明度です。そして、円錐の中に点をとることで色が決まります。\n        </p>\n\n        {/* HSV Description */}\n        <div className=\"my-6\">\n          <h3 className=\"mt-6 text-xl font-bold\">\n            H:色相 <i>Hue</i>\n          </h3>\n          <p>\n            0-360°を取り、色の種類を表します。Hは角度で, 0°赤, 120°緑,\n            240°青です。例えばHが0°(赤)のとき、S,Vの値が何に変化しても青や緑など別の色に変わることはありません。但し、白,黒にはなる可能性があります。\n          </p>\n\n          <h3 className=\"mt-4 text-xl font-bold\">\n            S:彩度 <i>saturation</i>\n          </h3>\n          <p>\n            0-1[0-100%]を取り、色の鮮やかさを表します。この値が大きくなると色が鮮やかになります。高さ(V)の値が小さくなるほど同じSの値でも中心(V軸)からの距離が短くなります。また、Sが0(点がV軸上)のとき、グレースケール、モノクロと呼ばれたりします。\n          </p>\n\n          <h3 className=\"mt-4 text-xl font-bold\">\n            V(B):光度 <i>value(brightness)</i>\n          </h3>\n          <p>\n            0-1[0-100%]を取り、色の明るさを表します。頂点は真っ黒、底面の中心は真っ白になります。また、Vが0のとき、Sは必ず0で、Hは0-360の値を取れますが、必ず真っ黒になります。\n          </p>\n        </div>\n\n        <p>RGB同様、以下のツールで確認できます。自由に操作してみてください。</p>\n\n        {/* HSV Controls */}\n        <HSVControls hsv={hsv} onHsvChange={handleHsvChange} />\n\n        <p>\n          前述のとおり、HSVを使用すると直感的に色を指定できます。「白色」の範囲は以下の赤い部分に注目すると良さそうです。\n        </p>\n\n        <div className=\"my-6 flex justify-center\">\n          <div className=\"h-60 w-60 max-w-full\">\n            <HSVWhiteAreaSVG />\n          </div>\n        </div>\n\n        <p>\n          個人差はあると思いますが、Sが3%以下、Vが90%以上のとき、Hの値に関わらず「白色」とみなせそうです。HSVは使いにくいのでRGBに変換し、その総数を調べたところ\n          <span className=\"font-bold\">9825個</span> 存在しました。\n        </p>\n\n        {/* Gist details */}\n        <GistDetails\n          showGistDetails={showGistDetails}\n          setShowGistDetails={setShowGistDetails}\n        />\n\n        <h2 className=\"mt-8 text-2xl font-bold\">白色生成</h2>\n        <p>\n          定義した白色の中からランダムで一つ生成します。名前を付けたり、別の白色に変更できたりします。\n        </p>\n\n        {/* White color generator */}\n        <WhiteGenerator\n          whiteName={whiteName}\n          whiteColor={whiteColor}\n          onWhiteNameChange={handleWhiteNameChange}\n          onGenerateWhite={handleGenerateWhite}\n        />\n\n        <p className=\"mt-8\">\n          <span className=\"border-b-2 border-gray-500\">最後に</span>\n          <br />\n          HSVにも弱点が存在します。HSV色空間の中で、同じ光度(V)であっても他の色に比べて青色が暗く見えます。人は色相(H)によって明度(V)の感じ方が変わるからです。これを考慮したOKLCH色空間と呼ばれるものが存在します。最大の特徴は\n          H(色相) ごとに L(明度), C(彩度)\n          の最大値が異なることです。図を描くのは非常に難しいので、\n          <a\n            href=\"https://oklch.com\"\n            className=\"mx-1 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            OKLCH Color Picker & Converter\n          </a>\n          という外部サイトを参照してみてください。\n        </p>\n      </div>\n    </ContentPageLayout>\n  );\n};\n\nexport default White;\n"],"names":["GistDetails","showGistDetails","setShowGistDetails","jsxs","jsx","HSVtoRGB","h","s","v","r","g","b","i","f","p","q","t","rgbToHex","generateRandom","min","max","HSVControls","hsv","onHsvChange","getHueGradient","colors","hue","getSaturationGradient","minColor","maxColor","getValueGradient","e","RGBControls","rgb","onRgbChange","getRedGradient","getGreenGradient","getBlueGradient","WhiteCanvas","color","name","canvasRef","useRef","CANVAS_WIDTH","CANVAS_HEIGHT","useEffect","canvas","ctx","WhiteGenerator","whiteName","whiteColor","onWhiteNameChange","onGenerateWhite","handleSaveImage","url","a","HSVCrossSectionSVG","HSVLateralSVG","HSVTopViewSVG","HSVWhiteAreaSVG","useColorControls","setRgb","useState","setHsv","channel","value","newRgb","newHsv","RGB_RANGE","useWhiteGenerator","setWhiteName","setWhiteColor","generateWhiteColor","useCallback","base","b1","c1","arrangeRGB","newName","newColor","White","handleRgbChange","handleHsvChange","handleWhiteNameChange","handleGenerateWhite","ContentPageLayout"],"mappings":"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"}