{"version":3,"file":"White-GFeD7zSo.js","sources":["../../src/pages/contents/White.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nimport ContentPageLayout from \"../../components/ContentPageLayout\";\n\ninterface HSVColor {\n  h: number;\n  s: number;\n  v: number;\n}\n\ninterface RGBColor {\n  r: number;\n  g: number;\n  b: number;\n}\n\n// White color range definition\nconst RGB_RANGE = [\n  [223, 223, 230],\n  [224, 223, 231],\n  [225, 223, 232],\n  [226, 223, 233],\n  [227, 223, 234],\n  [228, 223, 235],\n  [229, 223, 236],\n  [230, 223, 237],\n  [231, 224, 238],\n  [232, 225, 239],\n  [233, 226, 241],\n  [234, 227, 242],\n  [235, 228, 243],\n  [236, 229, 244],\n  [237, 230, 245],\n  [238, 231, 246],\n  [239, 232, 247],\n  [240, 233, 248],\n  [241, 233, 249],\n  [242, 234, 250],\n  [243, 235, 251],\n  [244, 236, 252],\n  [245, 237, 253],\n  [246, 238, 254],\n  [247, 239, 255],\n  [248, 240, 255],\n  [249, 241, 255],\n  [250, 242, 255],\n  [251, 243, 255],\n  [252, 244, 255],\n  [253, 245, 255],\n  [254, 246, 255],\n  [255, 247, 255],\n];\n\nconst White: React.FC = () => {\n  // RGB slider state\n  const [rgb, setRgb] = useState<RGBColor>({ r: 0, g: 0, b: 0 });\n\n  // HSV slider state\n  const [hsv, setHsv] = useState<HSVColor>({ h: 0, s: 1, v: 1 });\n\n  // White canvas state\n  const [whiteName, setWhiteName] = useState<string>(\"\");\n  const [whiteColor, setWhiteColor] = useState<string>(\"#ffffff\");\n\n  // Gist details state\n  const [showGistDetails, setShowGistDetails] = useState<boolean>(false);\n\n  // Canvas references\n  const whiteCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  // Convert HSV to RGB\n  const HSVtoRGB = (h: number, s: number, v: number): RGBColor => {\n    let r = 0,\n      g = 0,\n      b = 0;\n    const i = Math.floor(h * 6);\n    const f = h * 6 - i;\n    const p = v * (1 - s);\n    const q = v * (1 - f * s);\n    const t = v * (1 - (1 - f) * s);\n\n    switch (i % 6) {\n      case 0:\n        ((r = v), (g = t), (b = p));\n        break;\n      case 1:\n        ((r = q), (g = v), (b = p));\n        break;\n      case 2:\n        ((r = p), (g = v), (b = t));\n        break;\n      case 3:\n        ((r = p), (g = q), (b = v));\n        break;\n      case 4:\n        ((r = t), (g = p), (b = v));\n        break;\n      case 5:\n        ((r = v), (g = p), (b = q));\n        break;\n    }\n\n    return {\n      r: Math.round(r * 255),\n      g: Math.round(g * 255),\n      b: Math.round(b * 255),\n    };\n  };\n\n  // Generate random int between min and max\n  const generateRandom = (min: number, max: number): number => {\n    return (Math.round(Math.random() * 10000000) % (max - min)) + min;\n  };\n\n  // Generate a random white color\n  const generateWhiteColor = React.useCallback((): string => {\n    const [base, min, max] = RGB_RANGE[generateRandom(0, RGB_RANGE.length)];\n    const a = base;\n    const b1 = generateRandom(min, max + 1);\n    const c1 = generateRandom(min, max + 1);\n\n    // Randomly arrange RGB values\n    const arrangeRGB = (): [number, number, number] => {\n      switch (generateRandom(0, 3)) {\n        case 0:\n          return [a, b1, c1];\n        case 1:\n          return [b1, a, c1];\n        case 2:\n          return [b1, c1, a];\n        default:\n          return [a, b1, c1];\n      }\n    };\n\n    const [r, g, b] = arrangeRGB();\n    return `#${r.toString(16)}${g.toString(16)}${b.toString(16)}`;\n  }, []);\n\n  // Draw on the white canvas\n  const drawWhiteCanvas = (color: string, name?: string): void => {\n    const canvas = whiteCanvasRef.current;\n    if (canvas === null) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (ctx === null) return;\n\n    // Fill background\n    ctx.fillStyle = color;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Add color code\n    ctx.fillStyle = \"#000\";\n    ctx.font = \"90px monospace\";\n    ctx.fillText(color, 1100, 400);\n\n    // Add name if provided\n    if (name === null || name === undefined) name = \"\";\n    if (name.trim() !== \"\") {\n      ctx.font = \"120px monospace\";\n      ctx.fillText(name, 100, 280);\n    }\n  };\n\n  // Get canvas as base64 image\n  const getCanvasImage = (): string => {\n    const canvas = whiteCanvasRef.current;\n    if (canvas === null) return \"\";\n    return canvas.toDataURL(\"image/png\");\n  };\n\n  // Handle RGB slider changes\n  const handleRgbChange = (channel: \"r\" | \"g\" | \"b\", value: number): void => {\n    const newRgb = { ...rgb, [channel]: value };\n    setRgb(newRgb);\n  };\n\n  // Handle HSV slider changes\n  const handleHsvChange = (channel: \"h\" | \"s\" | \"v\", value: number): void => {\n    let newHsv = { ...hsv, [channel]: value };\n\n    // If v is 0, force s to be 0 as well\n    if (channel === \"v\" && value === 0) {\n      newHsv.s = 0;\n    }\n\n    setHsv(newHsv);\n  };\n\n  // Generate new white color\n  const handleGenerateWhite = (): void => {\n    const newColor = generateWhiteColor();\n    setWhiteColor(newColor);\n    drawWhiteCanvas(newColor, whiteName);\n  };\n\n  // Handle white name change\n  const handleWhiteNameChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ): void => {\n    const newName = e.target.value.slice(0, 10);\n    setWhiteName(newName);\n  };\n\n  // Convert RGB to hex string\n  const rgbToHex = (r: number, g: number, b: number): string => {\n    return `#${r.toString(16).padStart(2, \"0\")}${g.toString(16).padStart(2, \"0\")}${b.toString(16).padStart(2, \"0\")}`;\n  };\n\n  // Effect for RGB preview\n  useEffect(() => {\n    // Nothing to do here as we're using controlled components\n  }, [rgb]);\n\n  // Effect for HSV preview\n  useEffect(() => {\n    // We update the preview using inline style with the calculated HSV to RGB values\n  }, [hsv]);\n\n  // Initialize white canvas on load\n  useEffect(() => {\n    // Call handleGenerateWhite inline to avoid dependency warning\n    const newColor = generateWhiteColor();\n    setWhiteColor(newColor);\n    // drawWhiteCanvas will be called by the [whiteColor, whiteName] effect\n  }, [generateWhiteColor]);\n\n  // Redraw canvas whenever whiteColor or whiteName changes\n  useEffect(() => {\n    drawWhiteCanvas(whiteColor, whiteName);\n  }, [whiteColor, whiteName]);\n\n  // SVG symbols for HSV visualizations\n  const svgSymbols = (\n    <svg className=\"hidden\">\n      {/* HSV lateral section symbol */}\n      <symbol id=\"hsv-ls-svg-src\" viewBox=\"0 0 100 100\">\n        <rect className=\"fill-none\" x=\"0\" y=\"0\" width=\"100\" height=\"100\" />\n        <ellipse\n          className=\"fill-none stroke-current stroke-2\"\n          cx=\"50\"\n          cy=\"30\"\n          rx=\"40\"\n          ry=\"10\"\n        />\n        <polyline\n          className=\"stroke-round fill-none stroke-current stroke-2\"\n          points=\"10,31 50,90 90,31\"\n        />\n        <line\n          className=\"stroke-round stroke-current\"\n          x1=\"50\"\n          y1=\"91\"\n          x2=\"95\"\n          y2=\"91\"\n        />\n        <polygon className=\"fill-current\" points=\"95,91 93,89, 93,93\" />\n        <text className=\"fill-current\" x=\"90\" y=\"87\" fontSize=\"10\">\n          S\n        </text>\n        <line\n          className=\"stroke-round stroke-current\"\n          x1=\"50\"\n          y1=\"91\"\n          x2=\"85\"\n          y2=\"65\"\n        />\n        <text className=\"fill-current\" x=\"68\" y=\"88\" fontSize=\"10\">\n          H\n        </text>\n        <polygon className=\"fill-current\" points=\"63,82 61.5,85 65.5,83\" />\n        <rect className=\"fill-white\" x=\"63.7\" y=\"88\" width=\"1\" height=\"3\" />\n        <line\n          className=\"stroke-current\"\n          x1=\"63.5\"\n          y1=\"84\"\n          x2=\"64\"\n          y2=\"86.5\"\n          strokeWidth=\"1\"\n        />\n        <line\n          className=\"stroke-round stroke-current\"\n          x1=\"50\"\n          y1=\"91\"\n          x2=\"50\"\n          y2=\"10\"\n          strokeWidth=\"1\"\n        />\n        <polygon className=\"fill-current\" points=\"50,10 52,12 48,12\" />\n        <text className=\"fill-current\" x=\"38\" y=\"15\" fontSize=\"10\">\n          V\n        </text>\n      </symbol>\n\n      {/* HSV cross-section symbol */}\n      <symbol id=\"hsv-cs-svg-src\" viewBox=\"0 0 100 100\">\n        <rect className=\"fill-none\" x=\"0\" y=\"0\" width=\"100\" height=\"100\" />\n        <polygon\n          points=\"30,90 30,15 75,15\"\n          className=\"fill-black opacity-100\"\n        />\n        <polygon\n          points=\"30,90 30,15 75,15\"\n          className=\"fill-gradient-to-br from-red-500 to-transparent\"\n        />\n        <polygon\n          points=\"30,90 30,15 75,15\"\n          className=\"fill-gradient-to-t from-black to-transparent\"\n        />\n        <polygon\n          points=\"30,90 30,15 75,15\"\n          className=\"fill-none stroke-white/30\"\n          strokeWidth=\"0.3\"\n        />\n        <text className=\"fill-current\" x=\"30\" y=\"13\" fontSize=\"10\">\n          S\n        </text>\n        <line\n          className=\"stroke-current\"\n          x1=\"40\"\n          y1=\"10\"\n          x2=\"70\"\n          y2=\"10\"\n          strokeWidth=\"1\"\n        />\n        <polygon className=\"fill-current\" points=\"71,10 68,7 68,13\" />\n        <text className=\"fill-current\" x=\"20\" y=\"85\" fontSize=\"10\">\n          V\n        </text>\n        <line\n          className=\"stroke-current\"\n          x1=\"23\"\n          y1=\"70\"\n          x2=\"23\"\n          y2=\"20\"\n          strokeWidth=\"1\"\n        />\n        <polygon className=\"fill-current\" points=\"23,19 20,22 26,22\" />\n      </symbol>\n\n      {/* HSV top view symbol */}\n      <symbol id=\"hsv-top-svg-src\" viewBox=\"0 0 100 100\">\n        <rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" className=\"fill-none\" />\n        <circle cx=\"50\" cy=\"50\" r=\"50\" className=\"fill-red-500/70\" />\n        <circle cx=\"50\" cy=\"50\" r=\"50\" className=\"fill-yellow-500/70\" />\n        <circle cx=\"50\" cy=\"50\" r=\"50\" className=\"fill-green-500/70\" />\n        <circle cx=\"50\" cy=\"50\" r=\"50\" className=\"fill-cyan-500/70\" />\n        <circle cx=\"50\" cy=\"50\" r=\"50\" className=\"fill-blue-500/70\" />\n        <circle cx=\"50\" cy=\"50\" r=\"50\" className=\"fill-violet-500/70\" />\n        <circle cx=\"50\" cy=\"50\" r=\"50\" className=\"fill-white/50\" />\n        <circle cx=\"50\" cy=\"50\" r=\"3\" className=\"fill-black\" />\n        <line\n          x1=\"50\"\n          y1=\"50\"\n          x2=\"100\"\n          y2=\"50\"\n          className=\"stroke-black\"\n          strokeWidth=\"1\"\n        />\n        <text x=\"40\" y=\"60\" fontSize=\"10\" className=\"fill-black\">\n          V\n        </text>\n        <line x1=\"50\" y1=\"50\" x2=\"75.5\" y2=\"7\" className=\"stroke-black\" />\n        <text x=\"60\" y=\"45\" fontSize=\"10\" className=\"fill-black\">\n          H\n        </text>\n        <line x1=\"60\" y1=\"50\" x2=\"59\" y2=\"47\" className=\"stroke-black\" />\n        <line x1=\"58\" y1=\"45\" x2=\"55\" y2=\"42\" className=\"stroke-black\" />\n        <text x=\"60\" y=\"15\" fontSize=\"10\" className=\"fill-black\">\n          S\n        </text>\n        <polygon\n          points=\"75.5,7 73.5,7.6 76,9\"\n          className=\"fill-black stroke-black\"\n        />\n      </symbol>\n\n      {/* HSV white calculation explanation symbol */}\n      <symbol id=\"hsv-ls-white-svg-src\" viewBox=\"0 0 100 100\">\n        <rect className=\"fill-none\" x=\"0\" y=\"0\" width=\"100\" height=\"100\" />\n        <polyline\n          points=\"30,31 50,60 70,31\"\n          className=\"stroke-round fill-red-500 stroke-white stroke-2\"\n        />\n        <ellipse\n          cx=\"50\"\n          cy=\"30\"\n          rx=\"20\"\n          ry=\"5\"\n          className=\"fill-red-500 stroke-white stroke-2\"\n        />\n        <ellipse\n          cx=\"50\"\n          cy=\"30\"\n          rx=\"40\"\n          ry=\"10\"\n          className=\"fill-none stroke-current\"\n          strokeWidth=\"1\"\n        />\n        <polyline\n          points=\"10,31 50,90 90,31\"\n          className=\"stroke-round fill-none stroke-current\"\n          strokeWidth=\"1\"\n        />\n        <line\n          className=\"stroke-round stroke-current\"\n          x1=\"50\"\n          y1=\"91\"\n          x2=\"95\"\n          y2=\"91\"\n        />\n        <polygon className=\"fill-current\" points=\"95,91 93,89, 93,93\" />\n        <text className=\"fill-current\" x=\"90\" y=\"87\" fontSize=\"10\">\n          S\n        </text>\n        <line\n          className=\"stroke-round stroke-current\"\n          x1=\"50\"\n          y1=\"91\"\n          x2=\"85\"\n          y2=\"65\"\n        />\n        <text className=\"fill-current\" x=\"68\" y=\"88\" fontSize=\"10\">\n          H\n        </text>\n        <polygon className=\"fill-current\" points=\"63,82 61.5,85 65.5,83\" />\n        <rect className=\"fill-white\" x=\"63.7\" y=\"88\" width=\"1\" height=\"3\" />\n        <line\n          className=\"stroke-current\"\n          x1=\"63.5\"\n          y1=\"84\"\n          x2=\"64\"\n          y2=\"86.5\"\n          strokeWidth=\"1\"\n        />\n        <line\n          className=\"stroke-round stroke-current\"\n          x1=\"50\"\n          y1=\"91\"\n          x2=\"50\"\n          y2=\"10\"\n          strokeWidth=\"1\"\n        />\n        <polygon className=\"fill-current\" points=\"50,10 52,12 48,12\" />\n        <text className=\"fill-current\" x=\"38\" y=\"15\" fontSize=\"10\">\n          V\n        </text>\n      </symbol>\n    </svg>\n  );\n\n  return (\n    <ContentPageLayout title=\"白色\" svgSymbols={svgSymbols}>\n      <div className=\"prose dark:prose-invert max-w-none\">\n        <h2 className=\"mt-8 text-2xl font-bold\">白色</h2>\n        <p>\n          「白色」と聞いて一般的に思い浮かべるのは何でしょうか？「雲の色」、「消しゴムの色」など人により様々な意見が挙がると思います。\n          <br />\n          しかし、同じ単語の「白色」でも微妙に色合いが異なるはずです。タレントの某ミカさんの発言「白って200色あんねん」にあるように、「白色」の中でも更に色を分割できます。この状況に対し、人類は危機を感じるべきです。\n        </p>\n        <p>\n          皆さんは周りにいる友人や家族に話しかける際「ねぇ、人間」と話しかけますか?\n          もちろん答えはNo。顔が似ていたとて、相手の名前を呼ぶでしょう。こんなこと許されるはずがありません。「多様性」の時代、平等に扱うのが正しい対応ではないでしょうか?\n        </p>\n        <p>\n          そこで「白色」に見える色の範囲を決め、ランダムに選ばれた1色に名前を付けて頂きます。\n        </p>\n\n        <h2 className=\"mt-8 text-2xl font-bold\">RGB</h2>\n        <p>\n          色の表し方にはいくつか種類があります。まずは、「RGB」についてです。\n        </p>\n        <p>\n          RGB(RGBカラーモデル)とは赤-Red、緑-Green、青-Blueの3色をそれぞれ 0\n          から 255 の組み合わせて表現します。例えば[255, 255,\n          0]の組み合わせだと黄色です。16進数を用いて#ffff00と表現したりもします。\n        </p>\n        <p>\n          以下のツールで確認できます。自由に操作してみてください。0xという接頭語は16進数であることを明示しています。\n        </p>\n\n        {/* RGB Controls */}\n        <div className=\"my-6 rounded-lg bg-gray-100 p-6 dark:bg-gray-800\">\n          <div className=\"mb-4\">\n            <label\n              htmlFor=\"red\"\n              className=\"flex items-center justify-between text-gray-700 dark:text-gray-300\"\n            >\n              <span>赤</span>\n              <span className=\"font-mono\">\n                0x{rgb.r.toString(16).padStart(2, \"0\")} , {rgb.r}\n              </span>\n            </label>\n            <input\n              type=\"range\"\n              id=\"red\"\n              className=\"h-2 w-full cursor-pointer appearance-none rounded-lg bg-red-300 accent-red-600 dark:bg-red-900\"\n              min=\"0\"\n              max=\"255\"\n              value={rgb.r}\n              step=\"1\"\n              onChange={(e) => handleRgbChange(\"r\", parseInt(e.target.value))}\n            />\n          </div>\n\n          <div className=\"mb-4\">\n            <label\n              htmlFor=\"green\"\n              className=\"flex items-center justify-between text-gray-700 dark:text-gray-300\"\n            >\n              <span>緑</span>\n              <span className=\"font-mono\">\n                0x{rgb.g.toString(16).padStart(2, \"0\")} , {rgb.g}\n              </span>\n            </label>\n            <input\n              type=\"range\"\n              id=\"green\"\n              className=\"h-2 w-full cursor-pointer appearance-none rounded-lg bg-green-300 accent-green-600 dark:bg-green-900\"\n              min=\"0\"\n              max=\"255\"\n              value={rgb.g}\n              step=\"1\"\n              onChange={(e) => handleRgbChange(\"g\", parseInt(e.target.value))}\n            />\n          </div>\n\n          <div className=\"mb-4\">\n            <label\n              htmlFor=\"blue\"\n              className=\"flex items-center justify-between text-gray-700 dark:text-gray-300\"\n            >\n              <span>青</span>\n              <span className=\"font-mono\">\n                0x{rgb.b.toString(16).padStart(2, \"0\")} , {rgb.b}\n              </span>\n            </label>\n            <input\n              type=\"range\"\n              id=\"blue\"\n              className=\"h-2 w-full cursor-pointer appearance-none rounded-lg bg-blue-300 accent-blue-600 dark:bg-blue-900\"\n              min=\"0\"\n              max=\"255\"\n              value={rgb.b}\n              step=\"1\"\n              onChange={(e) => handleRgbChange(\"b\", parseInt(e.target.value))}\n            />\n          </div>\n\n          <div\n            className=\"mt-4 h-20 w-full rounded border border-gray-300 dark:border-gray-600\"\n            style={{ backgroundColor: rgbToHex(rgb.r, rgb.g, rgb.b) }}\n          ></div>\n        </div>\n\n        <p>\n          光の足し算なので、全て 0 → 黒色 , 全て255 → 白色\n          です。(厳密には違うかもしれませんがイメージはこれです。)\n        </p>\n        <p>\n          全ての値を220にすると白色に見えますが、どれか一つの値を255にすると白とは言い難い色になります。これでは定義が難しいのでより直感的に定義できる別の方法を試します。\n        </p>\n\n        <h2 className=\"mt-8 text-2xl font-bold\">HSV</h2>\n        <p>\n          次はHSV(HSB)色空間についてです。3次元を基にして人間が色を知覚する方法に類似するように作成された考え方です。\n        </p>\n        <p>\n          HSV色空間は円錐の形をしています。1枚目が俯瞰図、2枚目はy軸の断面図、3枚目以降は真上から見た図で、徐々に1枚目をスライスしてます。\n        </p>\n\n        {/* HSV Visualizations */}\n        <div className=\"my-6 flex flex-wrap justify-center gap-4\">\n          <svg className=\"h-32 w-32\">\n            <use href=\"#hsv-ls-svg-src\"></use>\n          </svg>\n          <svg className=\"h-32 w-32\">\n            <use href=\"#hsv-cs-svg-src\"></use>\n          </svg>\n          <svg className=\"h-32 w-32\">\n            <use href=\"#hsv-top-svg-src\"></use>\n          </svg>\n        </div>\n\n        <p>\n          まず H-色相 S-彩度\n          V(B)-明度です。そして、円錐の中に点をとることで色が決まります。\n        </p>\n\n        {/* HSV Description */}\n        <div className=\"my-6\">\n          <div className=\"flex flex-wrap justify-center gap-4\">\n            <svg className=\"h-40 w-40\">\n              <use href=\"#hsv-ls-svg-src\"></use>\n            </svg>\n            <svg className=\"h-40 w-40\">\n              <use href=\"#hsv-top-svg-src\"></use>\n            </svg>\n            <svg className=\"h-40 w-40\">\n              <use href=\"#hsv-cs-svg-src\"></use>\n            </svg>\n          </div>\n\n          <h3 className=\"mt-6 text-xl font-bold\">\n            H:色相 <i>Hue</i>\n          </h3>\n          <p>\n            0-360°を取り、色の種類を表します。Hは角度で, 0°赤, 120°緑,\n            240°青です。例えばHが0°(赤)のとき、S,Vの値が何に変化しても青や緑など別の色に変わることはありません。但し、白,黒にはなる可能性があります。\n          </p>\n\n          <h3 className=\"mt-4 text-xl font-bold\">\n            S:彩度 <i>saturation</i>\n          </h3>\n          <p>\n            0-1[0-100%]を取り、色の鮮やかさを表します。この値が大きくなると色が鮮やかになります。高さ(V)の値が小さくなるほど同じSの値でも中心(V軸)からの距離が短くなります。また、Sが0(点がV軸上)のとき、グレースケール、モノクロと呼ばれたりします。\n          </p>\n\n          <h3 className=\"mt-4 text-xl font-bold\">\n            V(B):光度 <i>value(brightness)</i>\n          </h3>\n          <p>\n            0-1[0-100%]を取り、色の明るさを表します。頂点は真っ黒、底面の中心は真っ白になります。また、Vが0のとき、Sは必ず0で、Hは0-360の値を取れますが、必ず真っ黒になります。\n          </p>\n        </div>\n\n        <p>RGB同様、以下のツールで確認できます。自由に操作してみてください。</p>\n\n        {/* HSV Controls */}\n        <div className=\"my-6 rounded-lg bg-gray-100 p-6 dark:bg-gray-800\">\n          <div className=\"mb-4\">\n            <label\n              htmlFor=\"h-hsv\"\n              className=\"flex items-center justify-between text-gray-700 dark:text-gray-300\"\n            >\n              <span>H</span>\n              <span className=\"font-mono\">{Math.round(hsv.h)}°</span>\n            </label>\n            <input\n              type=\"range\"\n              id=\"h-hsv\"\n              className=\"h-2 w-full cursor-pointer appearance-none rounded-lg bg-gradient-to-r from-red-500 via-green-500 to-blue-500 accent-gray-700 dark:accent-white\"\n              min=\"0\"\n              max=\"360\"\n              value={hsv.h}\n              step=\"1\"\n              onChange={(e) => handleHsvChange(\"h\", parseInt(e.target.value))}\n            />\n          </div>\n\n          <div className=\"mb-4\">\n            <label\n              htmlFor=\"s-hsv\"\n              className=\"flex items-center justify-between text-gray-700 dark:text-gray-300\"\n            >\n              <span>S</span>\n              <span className=\"font-mono\">{Math.round(hsv.s * 100)}%</span>\n            </label>\n            <input\n              type=\"range\"\n              id=\"s-hsv\"\n              className=\"h-2 w-full cursor-pointer appearance-none rounded-lg bg-gradient-to-r from-gray-300 to-blue-500 accent-gray-700 dark:accent-white\"\n              min=\"0\"\n              max=\"1\"\n              value={hsv.s}\n              step=\"0.01\"\n              onChange={(e) => handleHsvChange(\"s\", parseFloat(e.target.value))}\n            />\n          </div>\n\n          <div className=\"mb-4\">\n            <label\n              htmlFor=\"v-hsv\"\n              className=\"flex items-center justify-between text-gray-700 dark:text-gray-300\"\n            >\n              <span>V</span>\n              <span className=\"font-mono\">{Math.round(hsv.v * 100)}%</span>\n            </label>\n            <input\n              type=\"range\"\n              id=\"v-hsv\"\n              className=\"h-2 w-full cursor-pointer appearance-none rounded-lg bg-gradient-to-r from-black to-white accent-gray-700 dark:accent-white\"\n              min=\"0\"\n              max=\"1\"\n              value={hsv.v}\n              step=\"0.01\"\n              onChange={(e) => handleHsvChange(\"v\", parseFloat(e.target.value))}\n            />\n          </div>\n\n          <div\n            className=\"mt-4 h-20 w-full rounded border border-gray-300 dark:border-gray-600\"\n            style={{\n              backgroundColor: rgbToHex(\n                HSVtoRGB(hsv.h / 360, hsv.s, hsv.v).r,\n                HSVtoRGB(hsv.h / 360, hsv.s, hsv.v).g,\n                HSVtoRGB(hsv.h / 360, hsv.s, hsv.v).b,\n              ),\n            }}\n          ></div>\n        </div>\n\n        <p>\n          前述のとおり、HSVを使用すると直感的に色を指定できます。「白色」の範囲は以下の赤い部分に注目すると良さそうです。\n        </p>\n\n        <div className=\"my-6 flex justify-center\">\n          <svg className=\"h-60 w-60 max-w-full\">\n            <use href=\"#hsv-ls-white-svg-src\"></use>\n          </svg>\n        </div>\n\n        <p>\n          個人差はあると思いますが、Sが3%以下、Vが90%以上のとき、Hの値に関わらず「白色」とみなせそうです。HSVは使いにくいのでRGBに変換し、その総数を調べたところ\n          <span className=\"font-bold\">9825個</span> 存在しました。\n        </p>\n\n        {/* Gist details */}\n        <div className=\"my-6\">\n          <div className=\"rounded-lg border border-gray-300 bg-gray-50 dark:border-gray-700 dark:bg-gray-800\">\n            <button\n              onClick={() => setShowGistDetails(!showGistDetails)}\n              className=\"flex w-full items-center justify-between p-4 text-left font-medium focus:outline-none\"\n            >\n              <span>詳細を{showGistDetails ? \"隠す\" : \"表示\"}</span>\n              <svg\n                className={`h-5 w-5 transform transition-transform ${showGistDetails ? \"rotate-180\" : \"\"}`}\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M19 9l-7 7-7-7\"\n                />\n              </svg>\n            </button>\n\n            {showGistDetails && (\n              <div className=\"border-t border-gray-300 p-4 dark:border-gray-700\">\n                <p className=\"mb-4\">\n                  <strong>HSVをRGBに変換した理由</strong>\n                  <br />\n                  RGBは色の重複が無いが、HSVは重複がある。例えば、S:0%,\n                  V:100%のとき、色はHの値に関わらず#fff(真っ白)となるから。\n                </p>\n\n                <p>\n                  <strong>9825個の算出方法</strong>\n                  <br />\n                  HSVをRGBに変換し、Rが255の時のG,\n                  Bの範囲、Rが254の...と繰り返していき、G,Bについても同様に求める。その後重複を除き数えた。\n                  <br />\n                  かなり無理やりですが、ソースは\n                  <a\n                    className=\"ml-1 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300\"\n                    href=\"https://gist.github.com/konattsu/e56eff220bd0a364a0f79ea91b666fc5\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    ここ\n                  </a>\n                  。\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <h2 className=\"mt-8 text-2xl font-bold\">白色生成</h2>\n        <p>\n          定義した白色の中からランダムで一つ生成します。名前を付けたり、別の白色に変更できたりします。\n        </p>\n\n        {/* White color generator */}\n        <div className=\"my-6 space-y-4 rounded-lg border border-gray-300 bg-gray-50 p-6 dark:border-gray-700 dark:bg-gray-800\">\n          <div className=\"flex flex-wrap items-center gap-4\">\n            <div className=\"flex flex-grow items-center\">\n              <label\n                htmlFor=\"input-white-name\"\n                className=\"mr-2 font-medium whitespace-nowrap\"\n              >\n                色の名前(1-10字):\n              </label>\n              <input\n                type=\"text\"\n                id=\"input-white-name\"\n                className=\"flex-grow rounded border border-gray-300 p-2 focus:border-blue-500 focus:outline-none dark:border-gray-600 dark:bg-gray-700\"\n                value={whiteName}\n                onChange={handleWhiteNameChange}\n                maxLength={10}\n                placeholder=\"ここに入力\"\n              />\n            </div>\n\n            <button\n              onClick={handleGenerateWhite}\n              className=\"rounded bg-blue-600 px-4 py-2 font-medium text-white hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-600\"\n            >\n              別の白色\n            </button>\n\n            <a\n              href={getCanvasImage()}\n              download=\"white.png\"\n              className=\"rounded bg-green-600 px-4 py-2 font-medium text-white hover:bg-green-700 dark:bg-green-700 dark:hover:bg-green-600\"\n            >\n              画像を保存\n            </a>\n          </div>\n\n          <div className=\"relative aspect-video w-full overflow-hidden rounded border border-gray-300 bg-white dark:border-gray-600\">\n            <canvas\n              ref={whiteCanvasRef}\n              width=\"1500\"\n              height=\"500\"\n              className=\"h-full w-full object-contain\"\n            ></canvas>\n          </div>\n        </div>\n\n        <p className=\"mt-8\">\n          <span className=\"border-b-2 border-gray-500\">最後に</span>\n          <br />\n          HSVにも弱点が存在します。HSV色空間の中で、同じ光度(V)であっても他の色に比べて青色が暗く見えます。人は色相(H)によって明度(V)の感じ方が変わるからです。これを考慮したOKLCH色空間と呼ばれるものが存在します。最大の特徴は\n          H(色相) ごとに L(明度), C(彩度)\n          の最大値が異なることです。図を描くのは非常に難しいので、\n          <a\n            href=\"https://oklch.com\"\n            className=\"mx-1 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            OKLCH Color Picker & Converter\n          </a>\n          という外部サイトを参照してみてください。\n        </p>\n      </div>\n    </ContentPageLayout>\n  );\n};\n\nexport default White;\n"],"names":["RGB_RANGE","White","rgb","setRgb","useState","hsv","setHsv","whiteName","setWhiteName","whiteColor","setWhiteColor","showGistDetails","setShowGistDetails","whiteCanvasRef","useRef","HSVtoRGB","h","s","v","r","g","b","i","f","p","q","t","generateRandom","min","max","generateWhiteColor","React","base","a","b1","c1","arrangeRGB","drawWhiteCanvas","color","name","canvas","ctx","getCanvasImage","handleRgbChange","channel","value","newRgb","handleHsvChange","newHsv","handleGenerateWhite","newColor","handleWhiteNameChange","e","newName","rgbToHex","useEffect","svgSymbols","jsxs","jsx","ContentPageLayout"],"mappings":"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"}